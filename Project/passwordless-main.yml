# - name: Set up passwordless SSH
#   hosts: localhost
#   gather_facts: no
#   vars:
#     remote_hosts:
#       - { host: "remote_host_1", user: "ubuntu" }
#       - { host: "remote_host_2", user: "ubuntu" }
#       - { host: "remote_host_3", user: "ec2-user" }

#   tasks:
#     - name: Generate ed25519 SSH Key Pair
#       ansible.builtin.command: "ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -N ''"
#       args:
#         creates: "~/.ssh/id_ed25519"

#     - name: Copy Public Key to Remote Hosts
#       ansible.builtin.command: "ssh-copy-id -i ~/.ssh/id_ed25519.pub {{ item.user }}@{{ item.host }}"
#       with_items: "{{ remote_hosts }}"

# - name: Set up passwordless SSH
#   hosts: all
#   become: true
#   gather_facts: no

#   tasks:
#     - name: Generate ed25519 SSH Key Pair
#       ansible.builtin.command: "ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -N ''"
#       args:
#         creates: "~/.ssh/id_ed25519"

#     - name: Copy Public Key to Remote Hosts
#       ansible.builtin.command: "ssh-copy-id -i ~/.ssh/id_ed25519.pub {{ ansible_user }}@{{ inventory_hostname }}"

# - name: Set up passwordless SSH
#   hosts: all
#   become: true
#   gather_facts: no

#   tasks:
#     - name: Generate ed25519 SSH Key Pair
#       ansible.builtin.command: "ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -N ''"
#       args:
#         creates: "~/.ssh/id_ed25519"
#       delegate_to: localhost
#       run_once: true

#     - name: Copy Public Key to Remote Hosts
#       ansible.builtin.command: "ssh-copy-id -i ~/.ssh/id_ed25519.pub {{ ansible_user }}@{{ ansible_host }}"
#       delegate_to: localhost
#       run_once: true
#       with_inventory_hostnames: all

# - name: Set up passwordless SSH
#   hosts: all
#   become: true
#   gather_facts: no

#   tasks:
#     - name: Generate ed25519 SSH Key Pair on Control Node
#       ansible.builtin.command:
#         cmd: "ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -N ''"
#         creates: "~/.ssh/id_ed25519"

#     - name: Ensure .ssh directory exists on remote host
#       ansible.builtin.file:
#         path: "/home/{{ ansible_user }}/.ssh"
#         state: directory
#         mode: '0700'
#         owner: "{{ ansible_user }}"
#         group: "{{ ansible_user }}"

#     - name: Copy public key to remote authorized_keys
#       ansible.builtin.copy:
#         src: "~/.ssh/id_ed25519.pub"
#         dest: "/home/{{ ansible_user }}/.ssh/authorized_keys"
#         owner: "{{ ansible_user }}"
#         group: "{{ ansible_user }}"
#         mode: '0600'
#       delegate_to: localhost
#       with_inventory_hostnames: all
#       run_once: true

#     - name: Set permissions on authorized_keys file
#       ansible.builtin.file:
#         path: "/home/{{ ansible_user }}/.ssh/authorized_keys"
#         mode: '0600'
#         owner: "{{ ansible_user }}"
#         group: "{{ ansible_user }}"

#     - name: Verify SSH access
#       ansible.builtin.command: "ssh -o BatchMode=yes -o StrictHostKeyChecking=no {{ ansible_user }}@{{ inventory_hostname }} 'echo SSH access successful'"
#       register: ssh_check
#       ignore_errors: true

#     - name: Show SSH check result
#       ansible.builtin.debug:
#         msg: "{{ inventory_hostname }}: {{ ssh_check.stdout if ssh_check is defined else 'SSH connection failed' }}"

---
- name: Set up Passwordless SSH Access
  hosts: all
  gather_facts: no
  vars:
    ssh_key_type: ed25519
    ssh_key_path: "~/.ssh/id_{{ ssh_key_type }}"

  tasks:
    - name: Check if SSH key exists
      become: no
      delegate_to: localhost
      ansible.builtin.stat:
        path: "{{ ssh_key_path }}"
      register: ssh_key_check

    - name: Generate SSH Key Pair on Control Node
      become: no
      delegate_to: localhost
      ansible.builtin.shell: |
        ssh-keygen -t {{ ssh_key_type }} -f {{ ssh_key_path }} -N '' -q
      when: not ssh_key_check.stat.exists
      changed_when: false

    - name: Ensure .ssh directory exists on remote hosts
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/.ssh"
        state: directory
        mode: '0700'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Ensure authorized_keys file exists
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/.ssh/authorized_keys"
        state: touch
        mode: '0600'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Add SSH Public Key to Authorized Keys
      ansible.posix.authorized_key:
        user: "{{ ansible_user }}"
        state: present
        key: "{{ lookup('file', ssh_key_path + '.pub') }}"

    - name: Display SSH Connection Test Results
      ansible.builtin.debug:
        msg: "{{ inventory_hostname }}: {{ ssh_test.stdout | default('SSH connection failed') }}"
      when: ssh_test is defined

  handlers:
    - name: Restart SSH Service
      ansible.builtin.service:
        name: sshd  
        state: restarted